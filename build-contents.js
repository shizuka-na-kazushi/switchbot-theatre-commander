

const fs = require("node:fs");
const Path = require("node:path");

const root_dir = "./src/www";
const variableNamePrefix = "binFile_";

const filenameBinFilesHeader = "./src/BinFiles.h"
const filenameBinFilesCpp = "./src/BinFiles.cpp"

const mapContentType = {
  "png": "image/png",
  "jpeg": "image/jpeg",
  "jpg": "image/jpeg",
  "ico": "image/x-icon",
  "json": "application/json",
  "html": "text/html",
  "css": "text/css",
  "txt": "text/plan",
};

const contentTypeDefault = "application/octet-stream"

fs.readdir(root_dir, (err, files) => {
  if (err) {
    console.log(err);
    process.exit();
  }

  const codeTextHeader = generateHeaderCodeText(files);
  saveBinFilesHeader(codeTextHeader);

  const codeTextCpp = generateCppCodeText(files);
  // console.log(codeTextCpp);
  saveBinFilesCpp(codeTextCpp);
})

function generateVariableName(fileName) {
  let v = fileName.replaceAll(".", "_").replaceAll("-", "_");
  return variableNamePrefix + v;
}

const BinFiles_Comments = `
// !!!!!!!!!!!!     DO NOT EDIT THIS FILE DIRECTORY        !!!!!!!!!!!!
//
// This file need to be generated by 'build-contents.js'
// It will generate the code accordance with files in 'src/www'
//
// !!!!!!!!!!!!     DO NOT EDIT THIS FILE DIRECTORY        !!!!!!!!!!!!
`;

const BinFilesHeader_BeginCode = `
#ifndef __BIN_FILE_H__
#define __BIN_FILE_H__
boolean dispatchBinFiles(const HeaderInfo& header, WiFiClient& client);
`;

const BinFilesHeader_EndCode = `
#endif // !__BIN_FILE_H__
`;

const BinFilesCpp_BeginCode = `
#include <WiFi.h>
#include "ServoWebServer.h"
#include "BinFiles.h"

#define WEB_ROUTE_BIN_FILE_DEF(X_PATH, X_VARIABLE, X_CONTENT_TYPE)  \\
    else if (header.path == X_PATH) {   \\
    return respondBinFile(header, client, X_VARIABLE, sizeof(X_VARIABLE) / sizeof(X_VARIABLE[0]), X_CONTENT_TYPE);\\
  }

boolean dispatchBinFiles(const HeaderInfo& header, WiFiClient& client) {
  if (0) {} 

`;

const BinFilesCpp_EndCode = `
  return false; 
}`;

function generateHeaderCodeText(files) {
  let codeText = "";

  files.forEach((f) => {
    const d = fs.readFileSync(Path.join(root_dir, f));
    const length = d.length;
    
    codeText += `const uint8_t ${generateVariableName(f)}[] PROGMEM = {`;
    let i = 0;
    d.forEach((v) => {
      codeText += ("0x" + v.toString(16));
      if (i < length) {
        codeText += (", ");
      }
      i++;
    });
    
    codeText += "};\n\n";  
  })

  return codeText;
}

function getContentType(filename) {
  const pos = filename.lastIndexOf(".");
  if (pos <= 0) {
    return contentTypeDefault;
  }
  const ext = filename.substring(pos + 1);
  const r = mapContentType[ext];
  if (!r) {
    return contentTypeDefault;
  }
  return r;
}

function generateCppCodeText(files) {
  let codeText = "";

  files.forEach((f) => {
    const serverPath = Path.join("/", f);
    codeText += `  WEB_ROUTE_BIN_FILE_DEF("${serverPath}", ${generateVariableName(f)}, "${getContentType(f)}")\n`;
  })

  return codeText;
}

function saveBinFilesHeader(codeText) {
  const fwrite = fs.openSync(filenameBinFilesHeader, fs.constants.O_CREAT | fs.constants.O_RDWR | fs.constants.O_TRUNC);
  
  fs.writeFileSync(fwrite, BinFiles_Comments);
  fs.writeFileSync(fwrite, BinFilesHeader_BeginCode);
  fs.writeFileSync(fwrite, codeText);  
  fs.writeFileSync(fwrite, BinFilesHeader_EndCode);
  fs.close(fwrite);

  console.log(`${filenameBinFilesHeader} was created.`);
}

function saveBinFilesCpp(codeText) {
  const fwrite = fs.openSync(filenameBinFilesCpp, fs.constants.O_CREAT | fs.constants.O_RDWR | fs.constants.O_TRUNC);

  fs.writeFileSync(fwrite, BinFiles_Comments);
  fs.writeFileSync(fwrite, BinFilesCpp_BeginCode);
  fs.writeFileSync(fwrite, codeText);  
  fs.writeFileSync(fwrite, BinFilesCpp_EndCode);
  fs.close(fwrite);

  console.log(`${filenameBinFilesCpp} was created.`);
}
